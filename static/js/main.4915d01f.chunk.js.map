{"version":3,"sources":["logo.svg","Footer.js","Header.js","Pop.js","Fandom.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Footer","react_default","a","createElement","src","logo","className","alt","Component","Header","Pop","props","pop","image_url","name","Fandom","fandom","pops","map","index","src_Pop","key","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","fandoms","_this2","fetch","headers","Content-Type","Accept","then","response","json","setState","content","src_Fandom","App","src_Header_0","src_Main_0","src_Footer_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yUCiBzBC,0LAXX,OACEC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAMC,UAAU,aAAaC,IAAI,SAC3CN,EAAAC,EAAAC,cAAA,uCALWK,cCWNC,0LAVX,OACER,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,8CAJaK,oBCYNE,MAZf,SAAaC,GACX,IAAMC,EAAMD,EAAMC,IAClB,OACEX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACXL,EAAAC,EAAAC,cAAA,OAAKC,IAAKQ,EAAIC,UAAWN,IAAKK,EAAIE,OAClCb,EAAAC,EAAAC,cAAA,cACCS,EAAIE,cCUEC,MAff,SAAgBJ,GACd,IAAMK,EAASL,EAAMK,OACfC,EAAOD,EAAOC,KAAKC,IAAI,SAACN,EAAKO,GAAN,OACzBlB,EAAAC,EAAAC,cAACiB,EAAD,CAAKC,IAAKF,EAAOP,IAAKA,MAE1B,OACEX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,cAASa,EAAOF,MAChBb,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACZW,KCoCMK,qBA5Cb,SAAAA,EAAYX,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMf,KAEDmB,MAAQ,CACXC,WAAW,EACXC,QAAS,IALMT,mFASC,IAAAU,EAAAP,KAClBQ,MAAM,kBAAmB,CACvBC,QAAU,CACRC,eAAgB,mBAChBC,OAAU,sBAGXC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GACJP,EAAKQ,SAAS,CACZT,QAASQ,EACTT,WAAW,uCAMjB,IAAIW,EAUJ,OAREA,EADEhB,KAAKI,MAAMC,UACH9B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WAEfoB,KAAKI,MAAME,QAAQd,IAAI,SAACF,EAAQG,GACxC,OACElB,EAAAC,EAAAC,cAACwC,EAAD,CAAQtB,IAAKF,EAAOH,OAAQA,MAKhCf,EAAAC,EAAAC,cAAA,YACKuC,UAvCQlC,cCcJoC,0LAVX,OACE3C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAC0C,EAAD,MACA5C,EAAAC,EAAAC,cAAC2C,EAAD,MACA7C,EAAAC,EAAAC,cAAC4C,EAAD,cANUvC,cCMEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.4915d01f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './Footer.css';\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <footer>\r\n          <img src={logo} className=\"react-logo\" alt=\"logo\" />\r\n          <span>\r\n            Made with react\r\n          </span>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <header>\r\n        <strong>\r\n          Funko Pop Collection\r\n        </strong>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Pop.css';\r\n\r\nfunction Pop(props) {\r\n  const pop = props.pop;\r\n  return (\r\n    <div className=\"card\">\r\n        <img src={pop.image_url} alt={pop.name}></img>\r\n        <strong>\r\n        {pop.name}\r\n        </strong>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Pop;\r\n\r\n\r\n// <div class=\"card\">\r\n//   <img src=\"img_avatar.png\" alt=\"Avatar\" style=\"width:100%\">\r\n//   <div class=\"container\">\r\n//     <h4><b>John Doe</b></h4> \r\n//     <p>Architect & Engineer</p> \r\n//   </div>\r\n// </div>","import React from 'react';\r\nimport Pop from './Pop';\r\nimport './Fandom.css';\r\n\r\nfunction Fandom(props) {\r\n  const fandom = props.fandom;\r\n  const pops = fandom.pops.map((pop, index) => \r\n      <Pop key={index} pop={pop} />\r\n  );\r\n  return (\r\n    <div className=\"row\">\r\n      <strong>{fandom.name}</strong>\r\n      <div className=\"cards\">\r\n        {pops}\r\n      </div>  \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Fandom;\r\n","import React, { Component } from 'react';\r\nimport Fandom from './Fandom';\r\nimport './Main.css';\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLoading: true,\r\n      fandoms: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('data/funko.json', {\r\n      headers : { \r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n       }\r\n    })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        this.setState({\r\n          fandoms: json,\r\n          isLoading: false\r\n        });\r\n      }); \r\n  }\r\n\r\n  render() {\r\n    let content;\r\n    if (this.state.isLoading) {\r\n      content = <div className=\"loader\"></div>;\r\n    } else {\r\n      content = this.state.fandoms.map((fandom, index) => {\r\n        return (\r\n          <Fandom key={index} fandom={fandom} />\r\n        );\r\n      });\r\n    }\r\n    return (\r\n      <main>\r\n          {content}\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\nimport Footer from './Footer';\nimport Header from './Header';\nimport Main from './Main';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <Main />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}