{"version":3,"sources":["Components/Footer/logo.svg","Components/Footer/index.js","Components/Footer/Footer.js","Components/Header/index.js","Components/Header/Header.js","Utilities/SortHelper.js","Components/Fandom/Pop.js","Components/Fandom/index.js","Components/Fandom/Fandom.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","src","logo","className","loading","alt","Component","Header","SortByName","a","b","nameA","name","toUpperCase","nameB","comparison","Pop","props","pop","image_url","Fandom","state","opened","handleClick","bind","this","setState","fandom","pops","sort","map","index","key","cardsClassName","collapsibleClassName","onClick","Main","isLoading","fandoms","fetch","headers","then","response","json","content","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2HAAAA,EAAOC,QAAU,IAA0B,kC,+RCE5BC,G,6KCIX,OACE,gCACE,yBAAKC,IAAKC,IAAMC,UAAU,aAAaC,QAAQ,OAAOC,IAAI,SAC1D,sD,GALaC,cCFNC,G,6KCGX,OACE,gCACE,6D,GAJaD,cCHN,SAASE,EAAYC,EAAGC,GACnC,IAAMC,EAAQF,EAAEG,KAAKC,cACfC,EAAQJ,EAAEE,KAAKC,cAEjBE,EAAa,EAQjB,OANIJ,EAAQG,EACVC,EAAa,EACJJ,EAAQG,IACjBC,GAAc,GAGTA,E,iBCEIC,MAXf,SAAaC,GACX,IAAMC,EAAMD,EAAMC,IAElB,OACE,yBAAKf,UAAU,QACb,yBAAKF,IAAKiB,EAAIC,UAAWf,QAAQ,OAAOC,IAAKa,EAAIN,OACjD,gCAASM,EAAIN,QCPJQ,G,wDCIb,WAAYH,GAAQ,IAAD,8BACjB,cAAMA,IAEDI,MAAQ,CAAEC,QAAQ,GACvB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAJF,E,0DAQjBC,KAAKC,UAAS,SAAAL,GAAK,MAAK,CACtBC,QAASD,EAAMC,a,+BAKjB,IAAMK,EAASF,KAAKR,MAAMU,OACpBC,EAAOD,EAAOC,KAAKC,KAAKrB,GAAYsB,KAAI,SAACZ,EAAKa,GAAN,OAC5C,kBAAC,EAAD,CAAKC,IAAKD,EAAOb,IAAKA,OAElBe,EAAiBR,KAAKJ,MAAMC,OAAS,QAAU,eAC/CY,EAAuBT,KAAKJ,MAAMC,OAAS,qBAAuB,qBAExE,OACE,yBAAKnB,UAAU,OACb,4BAAQA,UAAW+B,EAAsBC,QAASV,KAAKF,aAAcI,EAAOf,MAC5E,yBAAKT,UAAW8B,GACbL,Q,GA1BUtB,cCiDN8B,G,wDAhDb,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IAEDI,MAAQ,CACXgB,WAAW,EACXC,QAAS,IALM,E,gEASE,IAAD,OAClBC,MAAM,kBAAmB,CACvBC,QAAU,CACR,eAAgB,mBAChB,OAAU,sBAGbC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GACJ,IAAIL,EAAUK,EAAKd,KAAKrB,GAExB,EAAKkB,SAAS,CACZY,QAASA,EACTD,WAAW,S,+BAMf,IAAIO,EAYJ,OATEA,EADEnB,KAAKJ,MAAMgB,UACH,yBAAKlC,UAAU,WAEfsB,KAAKJ,MAAMiB,QAAQR,KAAI,SAACH,EAAQI,GACxC,OACE,kBAAC,EAAD,CAAQC,IAAKD,EAAOJ,OAAQA,OAMhC,8BACGiB,O,GA3CUtC,cCaJuC,G,6KAVX,OACE,yBAAK1C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUG,cCMEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,kB","file":"static/js/main.bb111543.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import Footer from './Footer';\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './Footer.css';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <footer>\n        <img src={logo} className=\"react-logo\" loading=\"lazy\" alt=\"logo\" />\n        <span>Made with react</span>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import Header from './Header';\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <strong>Funko Pop Collection</strong>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","export default function SortByName (a, b) {\n    const nameA = a.name.toUpperCase();\n    const nameB = b.name.toUpperCase();\n\n    let comparison = 0;\n\n    if (nameA > nameB) {\n      comparison = 1;\n    } else if (nameA < nameB) {\n      comparison = -1;\n    }\n\n    return comparison;\n};\n","import React from 'react';\nimport './Pop.css';\n\nfunction Pop(props) {\n  const pop = props.pop;\n  \n  return (\n    <div className=\"card\">\n      <img src={pop.image_url} loading=\"lazy\" alt={pop.name}></img>\n      <strong>{pop.name}</strong>\n    </div>\n  );\n}\n\nexport default Pop;\n","import Fandom from './Fandom';\n\nexport default Fandom;\n","import React, { Component } from 'react';\nimport SortByName from '../../Utilities/SortHelper';\nimport Pop from './Pop';\nimport './Fandom.css';\n\nclass Fandom extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { opened: false }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(){\n    this.setState(state => ({\n      opened: !state.opened\n    }));\n  }\n\n  render() {\n    const fandom = this.props.fandom;\n    const pops = fandom.pops.sort(SortByName).map((pop, index) => \n      <Pop key={index} pop={pop} />\n    );\n    const cardsClassName = this.state.opened ? \"cards\" : \"cards hidden\";\n    const collapsibleClassName = this.state.opened ? \"collapsible opened\" : \"collapsible closed\";\n\n    return (\n      <div className=\"row\">\n        <button className={collapsibleClassName} onClick={this.handleClick}>{fandom.name}</button>\n        <div className={cardsClassName}>\n          {pops}\n        </div>  \n      </div>\n    );\n  };\n}\n\nexport default Fandom;\n","import React, { Component } from 'react';\nimport SortByName from './Utilities/SortHelper'\nimport Fandom from './Components/Fandom';\nimport './Main.css';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: true,\n      fandoms: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('data/funko.json', {\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n    })\n    .then(response => response.json())\n    .then(json => {\n      let fandoms = json.sort(SortByName);\n\n      this.setState({\n        fandoms: fandoms,\n        isLoading: false\n      });\n    });\n  }\n\n  render() {\n    let content;\n\n    if (this.state.isLoading) {\n      content = <div className=\"loader\"></div>;\n    } else {\n      content = this.state.fandoms.map((fandom, index) => {\n        return (\n          <Fandom key={index} fandom={fandom} />\n        );\n      });\n    }\n    \n    return (\n      <main>\n        {content}\n      </main>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport Footer from './Components/Footer';\nimport Header from './Components/Header';\nimport Main from './Main';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <Main />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}